setwd("D:/Research/Kassandra/model/2019-12-04")
info = Sys.info() # получаем информацию о системе
library(docxtractr)
if (info[1] == "Linux") {
set_libreoffice_path("/usr/bin/libreoffice")  # ubuntu or macos
Sys.setenv(LD_LIBRARY_PATH = "/usr/lib/libreoffice/program/") # ubuntu protection against libreglo.so not found
}
if (info[1] == "Windows") {
Sys.setenv("TAR" = "internal") # if install_github() fails on Windows OS
set_libreoffice_path("C:/Program Files/LibreOffice/program/soffice.exe")  # windows
}
path = "~/Documents/kassandra/data/raw/"
path = "D:/Research/Kassandra/data/raw/"
#library(devtools)
devtools::install_github("kassandra-ru/kassandr")
library(kassandr)
library(tidyverse)
library(rio)
library(lubridate)
path_day = paste0(path, "/", Sys.Date(), "/") # add current date to path
watchdog_file = paste0(path, "watchdog.csv")
watchdog = import(watchdog_file)
# download all
download_log_new = download_statistics(path, watchdog)
# write log information (what has been successful...)
glimpse(download_log_new)
export(download_log_new, paste0(path_day, "download_log.csv"))
# adding raw files to gitignore
write_lines(na.omit(watchdog$file_raw), path = paste0(path_day, ".gitignore"))
library(tidyverse) # data manipulation
library(rio) # import - export data
library(tsibble) # ts data frames
#library(fable) # forecasting models
library(forecast) # forecasting models
library(lubridate) # working with dates
library(glmnet) # lasso
library(naniar) # missing values visualization
# library(fasster) # fasster model
library(ranger) # random forest
library(stringr) # character variables
library(rlang) # шаманство с бум-бум!
library(readxl) # чтение экселевских файлов
library(kassandr)
Sys.setlocale("LC_TIME", "C")
dir.create("estimation_results")
start_date = ymd("2011-10-01")
I_ipc = import("../../data/raw/2019-11-02/i_ipc.csv")
library(tidyverse) # data manipulation
library(rio) # import - export data
library(tsibble) # ts data frames
#library(fable) # forecasting models
library(forecast) # forecasting models
library(lubridate) # working with dates
library(glmnet) # lasso
library(naniar) # missing values visualization
# library(fasster) # fasster model
library(ranger) # random forest
library(stringr) # character variables
library(rlang) # шаманство с бум-бум!
library(readxl) # чтение экселевских файлов
library(kassandr)
Sys.setlocale("LC_TIME", "C")
dir.create("estimation_results")
start_date = ymd("2011-10-01")
I_ipc = import("../../data/raw/2019-12-04/i_ipc.csv")
I_ipc_tsibble = mutate(I_ipc, date = yearmonth(date)) %>% as_tsibble(index = date)%>%rename(value = cpi)
rus_m_full_stable = filter(I_ipc_tsibble, date >= start_date)
rus_m_full_stable %>% tail()
rus_m_full_stable %>% head()
proportion_test = 0.2 # доля ряда, используемая для оценки качества прогнозов
nobs_full = nrow(rus_m_full_stable)
nobs_test = round(proportion_test * nobs_full)
window_type = "sliding" # "sliding" or "stretching" as in tsibble
dates_test = tail(rus_m_full_stable$date, nobs_test)
h_all = 1:6
model_fun_tibble = tribble(~model_fun, ~h_agnostic, ~forecast_extractor,
"ets_fun", TRUE, "uni_model_2_scalar_forecast",
"tbats_fun", TRUE, "uni_model_2_scalar_forecast",
"arima_fun", TRUE, "uni_model_2_scalar_forecast",
"arima101_101_fun", TRUE, "uni_model_2_scalar_forecast")
cv_results = prepare_model_list(h_all = h_all, model_fun_tibble = model_fun_tibble, dates_test = dates_test,
window_type = window_type, series_data = rus_m_full_stable)
cv_results_new = estimate_and_forecast(cv_results)
mae_table = calculate_mae_table(cv_results_new)
mae_table %>% tail()
write_csv(mae_table, "estimation_results/mae_table_cpi.csv")
the_forecasts = prepare_model_list2(h_all = h_all, model_fun_tibble = model_fun_tibble, series_data = rus_m_full_stable)
the_forecasts_new = estimate_and_forecast(the_forecasts)
only_numbers = select(the_forecasts_new, date, h, model_fun, point_forecast)
write_csv(only_numbers, path = "estimation_results/forecasts_cpi.csv")
tab6b = import("../../data/raw/2019-12-04/tab6b.csv")
tab6b_tsibble = mutate(tab6b, date = yearquarter(date)) %>% as_tsibble(index = date)%>%rename(value = gdp_2016_price)
tab6b_tsibble = rename(tab6b_tsibble, gdp_real_2016_price = value) %>% mutate(gdp_rate = (gdp_real_2016_price - lag(gdp_real_2016_price, 4))/lag(gdp_real_2016_price, 4))
tab6b_tsibble %>% head()
tab6b_tsibble %>% tail()
start_date = ymd("2012-01-01")
rus_q_full_stable = tab6b_tsibble %>% rename(value = gdp_rate) %>% filter(date >= start_date)
proportion_test = 0.2 # доля ряда, используемая для оценки качества прогнозов
nobs_full = nrow(rus_q_full_stable)
nobs_test = round(proportion_test * nobs_full)
window_type = "sliding" # "sliding" or "stretching" as in tsibble
dates_test = tail(rus_q_full_stable$date, nobs_test)
h_all = 1:4
model_fun_tibble = tribble(~model_fun, ~h_agnostic, ~forecast_extractor,
"ets_fun", TRUE, "uni_model_2_scalar_forecast",
"tbats_fun", TRUE, "uni_model_2_scalar_forecast",
"arima_fun", TRUE, "uni_model_2_scalar_forecast",
"arima101_101_fun", TRUE, "uni_model_2_scalar_forecast")
cv_results = prepare_model_list(h_all = h_all, model_fun_tibble = model_fun_tibble, dates_test = dates_test,
window_type = window_type, series_data = rus_q_full_stable)
cv_results_new = estimate_and_forecast(cv_results)
mae_table = calculate_mae_table(cv_results_new)
mae_table
write_csv(mae_table, "estimation_results/mae_table_gdp_rate_real.csv")
the_forecasts = prepare_model_list2(h_all = h_all, model_fun_tibble = model_fun_tibble, series_data = rus_q_full_stable)
the_forecasts_new = estimate_and_forecast(the_forecasts)
only_numbers = select(the_forecasts_new, date, h, model_fun, point_forecast)
only_numbers
write_csv(only_numbers, path = "estimation_results/forecasts_gdp_rate_real.csv")
start_date = ymd("2013-01-01")
ind_prod = import("../../data/raw/2019-12-04/ind_okved2.csv")
ind_prod_tsibble = mutate(ind_prod, date = yearmonth(date)) %>% as_tsibble(index = date)%>%rename(value = ind_prod)
rus_m_full_stable = filter(ind_prod_tsibble, date >= start_date)
rus_m_full_stable %>% tail()
rus_m_full_stable %>% head()
proportion_test = 0.2 # доля ряда, используемая для оценки качества прогнозов
nobs_full = nrow(rus_m_full_stable)
nobs_test = round(proportion_test * nobs_full)
window_type = "sliding" # "sliding" or "stretching" as in tsibble
dates_test = tail(rus_m_full_stable$date, nobs_test)
h_all = 1:6
model_fun_tibble = tribble(~model_fun, ~h_agnostic, ~forecast_extractor,
"ets_fun", TRUE, "uni_model_2_scalar_forecast",
"tbats_fun", TRUE, "uni_model_2_scalar_forecast",
"arima_fun", TRUE, "uni_model_2_scalar_forecast",
"arima101_010_fun", TRUE, "uni_model_2_scalar_forecast")
cv_results = prepare_model_list(h_all = h_all, model_fun_tibble = model_fun_tibble, dates_test = dates_test,
window_type = window_type, series_data = rus_m_full_stable)
cv_results_new = estimate_and_forecast(cv_results)
mae_table = calculate_mae_table(cv_results_new)
mae_table %>% tail()
write_csv(mae_table, "estimation_results/mae_table_ind_prod.csv")
the_forecasts = prepare_model_list2(h_all = h_all, model_fun_tibble = model_fun_tibble, series_data = rus_m_full_stable)
the_forecasts_new = estimate_and_forecast(the_forecasts)
only_numbers = select(the_forecasts_new, date, h, model_fun, point_forecast)
write_csv(only_numbers, path = "estimation_results/forecasts_ind_prod.csv")
invest = import("../../data/raw/2019-12-04/invest.csv")
invest_tsibble = mutate(invest, date = yearquarter(date)) %>% as_tsibble(index = date)
invest_tsibble %>% head()
invest_tsibble %>% tail()
start_date = ymd("2012-01-01")
invest_full_stable = filter( invest_tsibble, date >= start_date)
proportion_test = 0.2 # доля ряда, используемая для оценки качества прогнозов
nobs_full = nrow(invest_full_stable)
nobs_test = round(proportion_test * nobs_full)
window_type = "sliding" # "sliding" or "stretching" as in tsibble
dates_test = tail(invest_full_stable$date, nobs_test)
h_all = 1:4
model_fun_tibble = tribble(~model_fun, ~h_agnostic, ~forecast_extractor,
"ets_fun", TRUE, "uni_model_2_scalar_forecast",
"tbats_fun", TRUE, "uni_model_2_scalar_forecast",
"arima_fun", TRUE, "uni_model_2_scalar_forecast",
"arima101_010_fun", TRUE, "uni_model_2_scalar_forecast")
cv_results = prepare_model_list(h_all = h_all, model_fun_tibble = model_fun_tibble, dates_test = dates_test,
window_type = window_type, series_data = invest_full_stable, target = "investment")
cv_results_new = estimate_and_forecast(cv_results)
mae_table = calculate_mae_table(cv_results_new)
mae_table
write_csv(mae_table, "estimation_results/mae_table_investment.csv")
the_forecasts = prepare_model_list2(h_all = h_all, model_fun_tibble = model_fun_tibble, series_data = invest_full_stable, target = "investment")
the_forecasts_new = estimate_and_forecast(the_forecasts)
only_numbers = select(the_forecasts_new, date, h, model_fun, point_forecast)
only_numbers
write_csv(only_numbers, path = "estimation_results/forecasts_investment.csv")
library(tidyverse)
library(tidyr)
library(rio)
library(kassandr)
dir.create("web_tables")
mae_table = import("estimation_results/mae_table_cpi.csv")
mae_post = mutate(mae_table, h = case_when(h == 1 ~ "1 месяц",
h == 2 ~ "2 месяца",
h == 3 ~ "3 месяца",
h == 4 ~ "4 месяца",
h == 5 ~ "5 месяцев",
h == 6 ~ "6 месяцев"), mae = round(mae, 2))
mae_wide = spread(mae_post, key = model_fun, value = mae)
writexl::write_xlsx(mae_wide, "web_tables/mae_cpi_wide.xlsx")
forecast_table = import("estimation_results/forecasts_cpi.csv")
forecast_post = mutate(forecast_table, point_forecast = round(point_forecast, 2))%>%
mutate(date = date_to_string(date, freq = 12))
forecast_wide = spread(forecast_post, key = model_fun, value = point_forecast) %>% arrange(h) %>% select(-h)
writexl::write_xlsx(forecast_wide, "web_tables/forecast_cpi_wide.xlsx")
mae_table = import("estimation_results/mae_table_gdp_rate_real.csv")
mae_post = mutate(mae_table, h = case_when(h == 1 ~ "1 квартал",
h == 2 ~ "2 квартала",
h == 3 ~ "3 квартала",
h == 4 ~ "4 квартала",
h == 5 ~ "5 кварталов",
h == 6 ~ "6 кварталов"), mae = round(mae, 4))
mae_wide = spread(mae_post, key = model_fun, value = mae)
writexl::write_xlsx(mae_wide, "web_tables/mae_gdp_wide.xlsx")
forecast_table = import("estimation_results/forecasts_gdp_rate_real.csv")
forecast_post = mutate(forecast_table, point_forecast = round(point_forecast, 3)) %>%
mutate(date = date_to_string(date, freq = 4))
forecast_wide = spread(forecast_post, key = model_fun, value = point_forecast) %>% arrange(h) %>% select(-h)
writexl::write_xlsx(forecast_wide, "web_tables/forecast_gdp_wide.xlsx")
mae_table = import("estimation_results/mae_table_ind_prod.csv")
mae_post = mutate(mae_table, h = case_when(h == 1 ~ "1 месяц",
h == 2 ~ "2 месяца",
h == 3 ~ "3 месяца",
h == 4 ~ "4 месяца",
h == 5 ~ "5 месяцев",
h == 6 ~ "6 месяцев"), mae = round(mae, 2))
mae_wide = spread(mae_post, key = model_fun, value = mae)
writexl::write_xlsx(mae_wide, "web_tables/mae_ind_prod_wide.xlsx")
forecast_table = import("estimation_results/forecasts_ind_prod.csv")
forecast_post = mutate(forecast_table, point_forecast = round(point_forecast, 2))%>%
mutate(date = date_to_string(date, freq = 12))
forecast_wide = spread(forecast_post, key = model_fun, value = point_forecast) %>% arrange(h) %>% select(-h)
writexl::write_xlsx(forecast_wide, "web_tables/forecast_ind_prod_wide.xlsx")
mae_table = import("estimation_results/mae_table_investment.csv")
mae_post = mutate(mae_table, h = case_when(h == 1 ~ "1 квартал",
h == 2 ~ "2 квартала",
h == 3 ~ "3 квартала",
h == 4 ~ "4 квартала",
h == 5 ~ "5 кварталов",
h == 6 ~ "6 кварталов"), mae = round(mae, 4))
mae_wide = spread(mae_post, key = model_fun, value = mae)
writexl::write_xlsx(mae_wide, "web_tables/mae_investment_wide.xlsx")
forecast_table = import("estimation_results/forecasts_investment.csv")
forecast_post = mutate(forecast_table, point_forecast = round(point_forecast, 3)) %>%
mutate(date = date_to_string(date, freq = 4))
forecast_wide = spread(forecast_post, key = model_fun, value = point_forecast) %>% arrange(h) %>% select(-h)
writexl::write_xlsx(forecast_wide, "web_tables/forecast_investment.xlsx")
library(tidyverse) # data manipulation
library(rio) # import - export data
library(tsibble) # ts data frames
#library(fable) # forecasting models
library(forecast) # forecasting models
library(lubridate) # working with dates
library(glmnet) # lasso
library(naniar) # missing values visualization
# library(fasster) # fasster model
library(ranger) # random forest
library(stringr) # character variables
library(rlang) # шаманство с бум-бум!
library(readxl) # чтение экселевских файлов
library(kassandr)
setwd("D:/Research/Kassandra/model/2019-12-04")
Sys.setlocale("LC_TIME", "C")
dir.create("estimation_results")
start_date = ymd("2011-10-01")
I_ipc = import("../../data/raw/2019-12-04/i_ipc.csv")
I_ipc_tsibble = mutate(I_ipc, date = yearmonth(date)) %>% as_tsibble(index = date)%>%rename(value = cpi)
rus_m_full_stable = filter(I_ipc_tsibble, date >= start_date)
rus_m_full_stable %>% tail()
rus_m_full_stable %>% head()
proportion_test = 0.2 # доля ряда, используемая для оценки качества прогнозов
nobs_full = nrow(rus_m_full_stable)
nobs_test = round(proportion_test * nobs_full)
window_type = "sliding" # "sliding" or "stretching" as in tsibble
dates_test = tail(rus_m_full_stable$date, nobs_test)
h_all = 1:6
model_fun_tibble = tribble(~model_fun, ~h_agnostic, ~forecast_extractor,
"ets_fun", TRUE, "uni_model_2_scalar_forecast",
"tbats_fun", TRUE, "uni_model_2_scalar_forecast",
"arima_fun", TRUE, "uni_model_2_scalar_forecast",
"arima101_101_fun", TRUE, "uni_model_2_scalar_forecast")
cv_results = prepare_model_list(h_all = h_all, model_fun_tibble = model_fun_tibble, dates_test = dates_test,
window_type = window_type, series_data = rus_m_full_stable)
cv_results_new = estimate_and_forecast(cv_results)
mae_table = calculate_mae_table(cv_results_new)
mae_table %>% tail()
write_csv(mae_table, "estimation_results/mae_table_cpi.csv")
the_forecasts = prepare_model_list2(h_all = h_all, model_fun_tibble = model_fun_tibble, series_data = rus_m_full_stable)
the_forecasts_new = estimate_and_forecast(the_forecasts)
only_numbers = select(the_forecasts_new, date, h, model_fun, point_forecast)
write_csv(only_numbers, path = "estimation_results/forecasts_cpi.csv")
source('D:/Research/Kassandra/model/2019-12-04/table_maker_for_hse_webpage.R', encoding = 'UTF-8', echo=TRUE)
setwd("D:/Research/Kassandra/data/raw/2019-12-11")
access_date = Sys.Date()
data = rio::import("tab5a.xlsx")
data = rio::import("tab5a.xls")
data_vector <- t(data[5, ]) %>% stats::na.omit() %>% as.numeric()
head(data_vector)
tail(data_vector)
data_vector<-data_vector[-13:16]
data_vector[13]
data_vector[-13]
data_vector[-16:-13]
data_vector[-13:-16]
data_vector<-data_vector[-13:-16]
data_ts <- stats::ts(data_vector, start = c(2011, 1), freq = 4)
data_tsibble <- tsibble::as_tsibble(data_ts) %>% dplyr::rename(date = index, gdp_current_price = value)
data_tsibble = dplyr::mutate(data_tsibble, access_date = access_date)
write_csv(data_tsibble, "temp_gdp.csv")
